#! /usr/bin/env ruby
#
# The cfruby executable - invokes the Cfengine-style parser

# require 'profile'

CFRUBY_COPYRIGHT = "Copyright GPL (c) 2004-2007"

usage = <<USAGE

cfenjin is the GNU cfengine style parser engine for Cfruby

Usage: cfenjin [-v] [-n] [--trace] [--no-tidy] site.rb [cf1.rb cf2.rb ...]

 'site' is the control file containing site specific parameters
 'cf' are files containing Cfruby scripting commands
 The idea is to have all site specific information in the site file
 and to have package/service specific configuration in the cf files.
			 
 Check the documentation for examples.

Options:

 -D --define              Define compound class(es)
 -N --negate --undefine   Undefine compound class(es)
 -c --no-check-files      (nya)
 -n --dry-run             Only talk, no action
 -q --quiet-mode          No talk, only action
 -d[1-3] --trace          Trace information (debug)
 -t --no-tidy             Do not run tidy (nya)
 -v [1-3] --verbose       Give verbose information
		-v 1                  Show system changes only
		-v 2                  Show status of testing
		-v 3                  Show all messages
 --strict                 Stop execution on error
 --dump                   Dump internal tables
 --dump-compiled          Dump compiled end-versions of each class

Hints:

  To see what class variables are defined use --verbose 1
  To see a dump of the compiled source code use --trace 3

Examples:

 Useful verbosity:
 ./bin/cfenjin doc/examples/cftest.rb -v 2

 Maximum verbosity:
 ./bin/cfenjin doc/examples/cftest.rb --trace 3 -v 3

 Standard run without tidying directories:
 ./bin/cfenjin --no-tidy doc/examples/site.rb doc/examples/cf*
	
NOTE: Cfruby/cfenjin is a work in progress. Please check
the README and COPYRIGHT files!

USAGE

# --------------------------------------------------------------------

# Make cfruby can be run from any location

srcpath=File.dirname(File.dirname(__FILE__))
libcfenjinpath=srcpath+'/lib' 
cfrubylibpath =srcpath+'/lib/libcfruby'

$: << srcpath					# ---- Add start path to search libraries
$: << libcfenjinpath << cfrubylibpath

require 'getoptlong'

CFRUBY_VERSION=File.new(srcpath+'/bin/VERSION').gets.strip

version = "\nCfruby/cfenjin "+CFRUBY_VERSION+" by Pjotr Prins and David Powers "+CFRUBY_COPYRIGHT+"\n"
print version

# ---- Parse command line
opts = GetoptLong.new(
 [ "--help", "-h", GetoptLong::NO_ARGUMENT ],
 [ "--define", "-D", GetoptLong::REQUIRED_ARGUMENT ],
 [ "--negate", "--undefine", "-N", GetoptLong::REQUIRED_ARGUMENT ],
 [ "--log-activity", GetoptLong::NO_ARGUMENT ],
 [ "--verbose", "-v", GetoptLong::OPTIONAL_ARGUMENT ],
 [ "--dry-run", "-n", GetoptLong::NO_ARGUMENT ],
 [ "--quiet-mode", "-q", GetoptLong::NO_ARGUMENT ],
 [ "--no-tidy", GetoptLong::NO_ARGUMENT ],
 [ "--dump", GetoptLong::NO_ARGUMENT ],
 [ "--strict", GetoptLong::NO_ARGUMENT ],
 [ "--dump-compiled", GetoptLong::NO_ARGUMENT ],
 [ "--trace", GetoptLong::OPTIONAL_ARGUMENT ]
)

do_help	         = false
verbose	         = 0
dry_run	         = false
quiet_mode	     = false
trace 	         = 0
notidy	         = false
strict           = false
defines          = []
undefines        = []
dump             = false
dump_compiled    = false

opts.each do | opt, arg |
	do_help           |= (opt == '--help')
	notidy            |= (opt == '--no-tidy')
	strict            |= (opt == '--strict')
	dump              |= (opt == '--dump')
	dump_compiled     |= (opt == '--dump-compiled')
	dry_run           |= (opt == '--dry-run')
	quiet_mode        |= (opt == '--quiet-mode')
  defines.push arg.split(/\./) if opt == '--define'
  undefines.push arg if opt == '--negate'
	if opt == '--trace'
		if arg =~ /\d+/
			trace	= arg.to_i
		else
			trace = 1
			ARGV.unshift(arg) if arg != ''
		end
	end
	if opt == '--verbose'
		if arg =~ /\d+/
			verbose	= arg.to_i
		else
			verbose = 1
			ARGV.unshift(arg) if arg != ''
		end
	end
end

defines = defines.flatten
undefines = undefines.flatten

if trace > 1
	print "\nLibrary search path = "
	p $: if trace
end

if do_help or ARGV.size < 1
	print usage
	exit 1
end

# -------------------------------------------------------------------

require 'cfruby'
require 'libcfenjin/cfp_stat'
require 'libcfenjin/cfp_manager'

include Cfruby

# ---- Setup global Cfstatus class:
cf = Cfp_Stat.new(verbose,trace,dry_run,quiet_mode,strict,defines,undefines)
cf.showtrace

# ---- Load site info
sitefile = ARGV.shift
cf.sitepath = File.dirname sitefile
cf.cfp_logger.trace TRACE_ENGINE,"sitepath=#{cf.sitepath}"

manager = Cfp_Manager.new cf
manager.parse sitefile,ARGV
manager.compile
if dump_compiled
	manager.dump_compiled
else
	manager.execute if !dry_run
	manager.dump if dump
end
